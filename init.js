require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);
const util = require('util');
const { startCommand } = require ("./keyboards/greatKey");
const { deleteFunction } = require ("./delete")
const { createScenes } = require ('./scenes')
const { getUserProfile } = require ('./profiles/getUserProfile')
const { dateUsers } = require('./DateUsers')
const { sendProfile } = require('./profiles/sendProfile')



bot.use(session());

bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', startCommand);
bot.command('start', startCommand);
bot.use((ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (!ctx.session.profiles) {
        ctx.session.profiles = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –∞–Ω–∫–µ—Ç –∑–¥–µ—Å—å
    }
    if (ctx.session.currentUserIndex === undefined) {
        ctx.session.currentUserIndex = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    return next()
});




createScenes(bot)



bot.action('fill_form', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.scene.enter('firstQuestion');
    } catch (err) {
        console.error("Error responding to callback query:", err);
        // Optionally, inform the user (consider the usability implications)
        await ctx.reply('Oops! There was an issue processing your request.');
    }
});

bot.action('update', (ctx) => {
    startCommand(ctx);
});

bot.action('updater', (ctx) => {
    startCommand(ctx);
});

bot.action('delete', async (ctx) => {
    try {
        await deleteFunction(ctx);
    } catch (err) {
        console.error(err);
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.');
    }
});


bot.action('search', async (ctx) => {
    try {
        await ctx.answerCbQuery();


        await dateUsers(ctx);


    } catch (err) {
        console.error("Error responding to callback query:", err);
        await ctx.reply('Oops! There was an issue processing your request.');
    }
});
bot.on('text', (ctx) => {
    if (ctx.session.complainStep === 'waiting_for_marketing') {
        const complaintText = ctx.message.text;
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        bot.telegram.sendMessage(6247308978, `–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –æ—Ç ${ctx.from.username || ctx.from.id}: ${complaintText}`);
        ctx.reply('–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –Ω–∞—à—É –ø–∏–∞—Ä –∫–æ–º–ø–∞–Ω–∏—é. –ò —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
        ctx.session.complainStep = null;
    }
});
bot.action('fill_form', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('firstQuestion');
});

bot.action('next', async (ctx) => {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ctx.session.currentProfileIndex –∏ ctx.session.profiles –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if (ctx.session.profiles && typeof ctx.session.currentProfileIndex !== 'undefined') {
        ctx.session.currentProfileIndex++; // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç
        if (ctx.session.currentProfileIndex < ctx.session.profiles.length) {
            await sendProfile(ctx); // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        } else {
            // –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            ctx.reply('–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç.');
            // –ò–ª–∏ –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–π –∞–Ω–∫–µ—Ç—ã —Å–Ω–æ–≤–∞
            // ctx.session.currentProfileIndex = 0;
            // await sendProfile(ctx);
        }
    } else {
        // –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–Ω–∫–µ—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–∞, —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—ã
        ctx.reply('–ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏—Ö –∑–∞–≥—Ä—É–∑–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
});
bot.action('next', async (ctx) => {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ctx.session.profiles –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (ctx.session.profiles) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–Ω–∫–µ—Ç—ã
        const randomIndex = Math.floor(Math.random() * ctx.session.profiles.length);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
        const randomProfile = ctx.session.profiles[randomIndex];
        await sendProfile(ctx, randomProfile);
    } else {
        // –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–Ω–∫–µ—Ç, —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—ã
        ctx.reply('–ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏—Ö –∑–∞–≥—Ä—É–∑–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
});

bot.action('like', async (ctx) => {
    const { profiles, currentProfileIndex } = ctx.session;

    if (profiles && Array.isArray(profiles) && currentProfileIndex < profiles.length) {
        const profile = profiles[currentProfileIndex];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ—Ñ–∏–ª—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)
        if (profile.username) {
            const telegramUrl = `https://t.me/${profile.username}`;
            ctx.reply(`–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº ${telegramUrl}`);

        } else if (profile.telegram_id) {
            const firstName = `${profile.name} ${profile.surname}`;

            const formattedName = `[${firstName}](tg://user?id=${profile.telegram_id})`;
            const textPredict = "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº"; // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç
            const messageText = `${formattedName}, ${textPredict}`;

            ctx.replyWithMarkdownV2(messageText);

        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏ telegram_id
            ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
        }

        let text = `üëª`;

        ctx.reply(text, {
            reply_markup: {
                keyboard: [
                    [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });
    }
});

bot.action('complain', (ctx) => {
    ctx.session.complainStep = 'waiting_for_complaint';
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã:');
});





bot.launch();


