require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);
const util = require('util');
const { startCommand } = require ("./keyboards/greatKey");
const { deleteFunction } = require ("./delete")
const { createScenes } = require ('./scenes')
const { getUserProfile } = require ('./profiles/getUserProfile')
const { dateUsers } = require('./DateUsers')
const { sendProfile } = require('./profiles/sendProfile')



bot.use(session());

bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', startCommand);
bot.command('start', startCommand);
bot.use((ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (!ctx.session.profiles) {
        ctx.session.profiles = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –∞–Ω–∫–µ—Ç –∑–¥–µ—Å—å
    }
    if (ctx.session.currentUserIndex === undefined) {
        ctx.session.currentUserIndex = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    return next()
});




createScenes(bot)



bot.action('fill_form', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.scene.enter('firstQuestion');
    } catch (err) {
        console.error("Error responding to callback query:", err);
        // Optionally, inform the user (consider the usability implications)
        await ctx.reply('Oops! There was an issue processing your request.');
    }
});

bot.action('update', (ctx) => {
    startCommand(ctx);
});

bot.action('updater', (ctx) => {
    startCommand(ctx);
});

bot.action('delete', async (ctx) => {
    try {
        await deleteFunction(ctx);
    } catch (err) {
        console.error(err);
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.');
    }
});


bot.action('search', async (ctx) => {
    try {
        await ctx.answerCbQuery();


        await dateUsers(ctx);


    } catch (err) {
        console.error("Error responding to callback query:", err);
        await ctx.reply('Oops! There was an issue processing your request.');
    }
});
bot.on('text', (ctx) => {
    if (ctx.session.complainStep === 'waiting_for_marketing') {
        const complaintText = ctx.message.text;
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        bot.telegram.sendMessage(6247308978, `–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –æ—Ç ${ctx.from.username || ctx.from.id}: ${complaintText}`);
        ctx.reply('–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –Ω–∞—à—É –ø–∏–∞—Ä –∫–æ–º–ø–∞–Ω–∏—é. –ò —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!');
        ctx.session.complainStep = null;
    }
});
bot.action('fill_form', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('firstQuestion');
});

bot.action('next', async (ctx) => {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ctx.session.currentProfileIndex –∏ ctx.session.profiles –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if (ctx.session.profiles && typeof ctx.session.currentProfileIndex !== 'undefined') {
        ctx.session.currentProfileIndex++; // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç. –ï—Å–ª–∏ –¥–∞, –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º.
        if (ctx.session.currentProfileIndex >= ctx.session.profiles.length) {
            ctx.session.currentProfileIndex = 0; // –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–π –∞–Ω–∫–µ—Ç–µ
        }

        await sendProfile(ctx); // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ü–∏–∫–ª–∏–≤—à—É—é—Å—è) –∞–Ω–∫–µ—Ç—É

    } else {
        // –í —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–Ω–∫–µ—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–∞, —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—ã
        ctx.reply('–ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏—Ö –∑–∞–≥—Ä—É–∑–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
});


bot.action('like', async (ctx) => {
    const { profiles, currentProfileIndex } = ctx.session;

    if (profiles && Array.isArray(profiles) && currentProfileIndex < profiles.length) {
        const profile = profiles[currentProfileIndex];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ—Ñ–∏–ª—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)
        if (profile.username) {
            const telegramUrl = `https://t.me/${profile.username}`;
            ctx.reply(`–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº ${telegramUrl}`);

        } else if (profile.telegram_id) {
            const firstName = `${profile.name} ${profile.surname}`;

            const formattedName = `[${firstName}](tg://user?id=${profile.telegram_id})`;
            const textPredict = "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº"; // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç
            const messageText = `${formattedName}, ${textPredict}`;

            ctx.replyWithMarkdownV2(messageText);

        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏ telegram_id
            ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
        }

        let text = `üëª`;

        ctx.reply(text, {
            reply_markup: {
                keyboard: [
                    [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });
    }
});
bot.action('piar', (ctx) => {
    ctx.reply('–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–∏–∞—Ä –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º, –æ—Ç–¥–µ–ª—å–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º –∏–ª–∏ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏, —Ç–æ –≤—ã –ø–æ–ø–∞–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É! üöÄ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∞–º—É—é —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. üí° –ù–∞—à–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å—Ö–µ–º—ã –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –ª—é–±—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –±—é–¥–∂–µ—Ç—ã. üí∞ –ù–µ –∑–Ω–∞–µ—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. üìûüìäüéØ\n\n–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ! ü§ùüíºüåü\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ —Å–≤—è–∑—å: [–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä—É](https://t.me/onlyloversmarketing)', { parse_mode: 'Markdown' });
});
bot.action('private', (ctx) => {
    ctx.reply('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç. üçë\n\n–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è nude –∫–æ–Ω—Ç–µ–Ω—Ç. üíã –î–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ç–∏–º–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏, —Ä–æ–º–∞–Ω—Ç–∏–∫–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–≤–æ—é –ª—é–±–æ–≤–Ω—É—é –ø–∞—Ä—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. üíï –≠—Ç–æ—Ç —á–∞—Ç –±–æ–ª—å—à–µ –¥–ª—è –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –æ–±–º–µ–Ω–∞ –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –≥–æ—Ä—è—á–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. \n\n –í —á–∞—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Ç—å –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—É –≤ 100—Ä –≤ –º–µ—Å—è—Ü\n üåπ \n\n –í–Ω–∏–º–∞–Ω–∏–µ –ê–∫—Ü–∏—è! –î–æ –ò—é–ª—è –º–µ—Å—è—Ü–∞ –≤—Ö–æ–¥ –≤ —á–∞—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π! ‚ù§ \n\n [–í—Ö–æ–¥ –≤ —á–∞—Ç](https://t.me/+dPJE3-xPHls3MzIy)', { parse_mode: 'Markdown' });
});
bot.action('complain', (ctx) => {
    // –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
    ctx.session.complainStep = 'waiting_for_complaint';
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã. –ù–∞—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
});

bot.on('text', (ctx) => {
    if (ctx.session.complainStep === 'waiting_for_complaint') {
        const complaintText = ctx.message.text;
        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∂–∞–ª–æ–±—É –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        bot.telegram.sendMessage(6247308978, `–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç ${ctx.from.username || ctx.from.id}: ${complaintText}`);
        ctx.reply('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.');
        ctx.session.complainStep = null; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã
    }
});

bot.action('complain', (ctx) => {
    ctx.session.complainStep = 'waiting_for_complaint';
    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã:');
});





bot.launch();


